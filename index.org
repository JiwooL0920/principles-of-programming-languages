#+Title: Computer Science 3MI3 - Principles of Programming Languages
#+Subtitle: 2020 Course Homepage
#+Author: Mark Armstrong
#+Date: July 31st, 2020
#+Description: The course homepage for the 2020 class of 3mi3.
#+Options: num:nil
#+SETUPFILE: ./org-html-themes/setup/theme-bigblow-local.setup

# TODO: export README when this is exported.

* Communication
:PROPERTIES:
:CUSTOM_ID: Communications/Announcements
:END:

** October
:PROPERTIES:
:CUSTOM_ID: October
:END:

- October 7th ::
  - Homework 4 is now posted.
    - Testing and Docker setup are included immediately this time.
  - A sample solution is now in place in the homework 2 document.
  - Notes from last week's Wednesday tutorial and lecture are now posted;
    sorry for the delay.

- October 6th :: The notes on infinite data in Scala
  have been updated with the developments from Monday's tutorial.
  This content will be reviewed and possibly built upon
  in tomorrow's tutorial, and you should review it
  for the (still to come) homework 4.

- October 2nd ::
  - Notes for today's lecture on infinite data in Scala
    have been posted under ‚ÄúLiterate programs‚Äù.
  - Unfortunately, I'm not on track to release homework 4 this evening;
    I need to iron out some details to try and make sure
    they are right the first time.
    - It should be released tomorrow by end of day.
    - In any case, this homework is not due until the Monday
      after reading week, so there will be lots of time to work on it.

- October 1st ::
  - Docker setup has been added for the homework 3 testing.
  - A sample solution has been added to the homework 1 document.
  
** September
:PROPERTIES:
:CUSTOM_ID: September
:END:

- September 29th :: Some of the names in the homework 3 testing script
  were inconsistent with the homework's instructions.
  The scripts have been corrected now.

  Additionally,
  - I have removed the blank bonus task from homework 3.
    I can't think of a fitting bonus for this week üôÅ.

  - The link to the Scala tests was broken. It is corrected now.

- September 28th :: Test scripts for homework 3 have been posted.
  The Docker setup is to follow shortly.

- September 27th :: Assignment 1 has been posted.
  The boilerplate and testing will come ASAP;
  I am catching up on more pressing content first,
  such as the testing for homework 3.

  #+begin_center
*Note that the deadline date for assignment 1 has changed.*
*It is now due October 21st, two weeks later than originally stated.*
*This change is reflected in the outline and the Avenue course's schedule.*
  #+end_center

- September 26 :: A statement on how testing and grading relate
  has been added to the homework section of this site,
  under the new current homework section.

  Additionally, the description of the efficiency tests
  for homework 2's bonus has been updated.
  The number of inferences applied on my sample solutions is now provided,
  which is a better metric to compare to than the time those tests
  took on my machine (which is, naturally, likely going to execute code
  at a different speed than your machine.)
  Note: in addition to comparing your solution to my sample solution,
  the marking for the bonus will also compare your solution
  to the rest of the class. So the bonus marks assigned
  will be relative to the average performance.

- September 25 :: Homework 3 is posted.
  - The bonus is still to come; I need to think of one üòÄ.

  Also, tests for the efficiency of your code in homework 2
  have been added to the homework 2 files.

- September 25 :: Live coding notes for today,
  on programming trees in Prolog, have been uploaded.

- September 24 :: A new ‚ÄúProlog tidbits‚Äù document has been uploaded
  and can be found under the Prolog section/tab on this site.

  I will aim to add information and examples to this file
  as I answer people's questions on the language and our homeworks in it,
  so that you can refer there if you have questions.

- September 23 :: The files and instructions for using Docker
  to test homework 2 are now uploaded.
  The instructions and links can be found in the homework 2 document.

- September 23 :: The completed version of notes 2 is now uploaded.

  Also,
  - *I've had to make one more edit to the provided code*
    *for ~isDigitList~; don't include the cut in the first case*. 
  - Habib's tutorial notes are now posted in the
    literate programs section of the homepage.

- September 23 :: There has been a change to the
  ~isDigitList~ question in homework 2.
  Please review that question.
  (For those who may have already completed it,
  reversing the list should adapt your current solution
  to the new requirements.)

  Also, unit tests for checking your homework 2
  have now been provided in the homework 2 document.

  Important notes regarding this testing:
  1. Unlike homework 1, for homework 2 it is /mandatory/
     that your code pass these tests.
  2. There is no interface file that you need to complete.
     You still only need submit your ~h2.pl~ file.
  3. Passing these tests does not guarantee a particular grade.
     What has been provided is intended to act as a /sanity check/,
     and more thorough tests may be used in the grading process.

  Instructions and files for using Docker to run the tests
  will be provided later today.

- September 22 :: More recording links have been added to the list.
  Also,
  - The homework boilerplate has been updated
    to indicate that use of the standard
    higher-order operators is always allowed.
  - Instructions for testing homework 1 using Docker are now uploaded
    (obviously too late to be useful, but added for completion's sake.)
    Similar setup and instructions will be added for homework 2 shortly.
  - A poor choice of wording regarding ~isDigitList~ has been changed
    in homework 2; ‚Äúthe first digit of ~X~ ‚áí the ‚Äúones‚Äù digit of ~X~‚Äù.

- September 18 :: Homework 2 has been posted.

- September 18 :: The notes from the live coding lecture
  have been properly placed in that section.

  They will be updated ASAP to include relevant code
  for the upcoming homework.

- September 18 :: Testing code has been uploaded for homework 1,
  in the homework file itself.
  *For this homework, it is optional that you complete the*
  *testing interface and submit it with your homework*.
  For future homeworks and assignments, tests will be provided
  in a more timely manner and required.

  Also note, the requirement to name both instances of
  your ~flatten~ and ~orderedElems~ function the same
  has been dropped.

- September 17 :: A note has been added to the course outline
  regarding use of *plaintext* or *code snippet markup*
  when sharing code in discussions with staff and on Teams,
  *instead of screenshots*.
  Also see the post in the general chat on Teams
  regarding how to use the code snippet formatting tool.

  Additionally:
  - A note was added to homework 1
    regarding the marking of the ~orderedElems~ question.
    And a small error regarding usage of two type parameters
    was fixed in the ~StructTree~ problem.

- September 16 :: The typos encountered in today's lecture
  have all been corrected (if I missed any, let me know.)
  - The first parse tree example has been corrected,
    and I've also massaged the definition of parse tree's a bit
    so that we don't need to draw the ‚Äúpointless nodes‚Äù
    I mentioned. The first example shows what we omit.

  Also note, especially for those in the Monday tutorial,
  the live coding notes on Scala have been updated.
  - A motivation section has been added which should better
    describe why we are coding the way we are in Scala.
  - One further update will be coming with some changes
    that came up during today's tutorial.

- September 15 :: Each student of this course should now have a
  (private) GitLab repository, at the address
  https://gitlab.cas.mcmaster.ca/cs3mi3-2020-student-repos/macid
  where ~macid~ is your McMaster ID.
  
  There were some initial issues with the ~master~ branch being protected,
  so you could not ~push~ to it; those should be resolved now.

  Please ~commit~ and ~push~ to your repo ASAP,
  even if it's just some placeholder files,
  to confirm everything is working.

  Please /do/ use the ~master~ branch for submitting homework.
  There is no need to create other branches for this course,
  though you are free to do so if you want to.

  If you seem unable to log in to the CAS GitLab,
  please try to follow the instructions to reset your CAS password
  that are located to the left of the login form.

- September 15 :: A recordings section has been added to this website
  with links to the recordings of lectures and tutorials on Streams
  (which I hope work for everyone, and not just me).

- September 14 :: The (still a bit incomplete) live coding notes
  from lecture and tutorial today have been posted.
  Note the new section along the top for these notes.
  They'll be cleaned up after Wednesday's tutorial.
  
- September 14 :: To address some questions which have come up
  in lectures and tutorials so far:
  - ‚ÄúAre we going to alternate between different programming languages
    or will we stick to Scala for a while?‚Äù
    - A good question, and something I meant to discuss
      but never got to.
      
      The rough timeline for introducing languages is intended to be
      - September 14th: introduce Scala (today)
      - September 18th: introduce Prolog (Friday)
      - October 7th: introduce Ruby
      - November 6th: introduce Clojure
      Assignment 1 will use Scala and Prolog,
      assignment 2 will use Scala and Ruby, and
      assignment 3 will use Prolog and Clojure.
      Homeworks may alternate sometimes, but I intend to focus on
      the languages which are being used for the current assignment
      in each homework.

      This is a much faster pace for
      picking up a language than previous courses,
      but we are usually focusing on a relatively small number
      of ideas in each language.

      Leverage what you know from previous courses,
      ask lots of questions (please!),
      and when in doubt, look closely at provided examples.

  - ‚ÄúCan we use IntelliJ for Scala?‚Äù, ‚ÄúDo we have to use Ammonite?‚Äù, etc.
    - You can use whatever tools you wish to for writing your code
      and interacting with Scala.
      On our end, we will be using Ammonite, but
      there should not be conflicts,
      and I intend to release a Docker image you can use
      to test for conflicts later this week.
  - ‚ÄúDo we have to use Docker?‚Äù
    - Not explicitely, though it's /strongly/ encouraged.
      Docker images will be provided so you can ensure
      your code works on the system it will be marked on.
      It is unlikely we will encounter conflicts in any case,
      but it is better to be certain by using the Docker images.
  - ‚ÄúWill live coding lecture and tutorial notes be posted?‚Äù
    - Yes, they will be posted, and should be available
      in the usual set of formats.
  Also,
  - Note that homework 1 was updated over the weekend
    with submission guidelines and a homework code of conduct
    related to collaboration. Please review it.

- September 11 :: Homework 1 has been uploaded and can be found
  under the homework section.
  - I am aware of the issues with the images in the PDF version;
    they will be fixed shortly.
  Also of note:
  - The Monday lecture will be a live coding session introducing
    some basic Scala concepts.
  - The tutorials will be running next week, and will be used
    to discuss Scala further.
  
- September 11 :: Reminder that the first lecture is today, at 1:30pm.
  It will be in the lectures and tutorials channel in Microsoft Teams.

- September 11 :: The first section of notes,
  [[1 ‚Äì Introduction and overview]], is now complete and uploaded.

- September 9 :: The Microsoft Teams team for the course
  has been activated. Please ensure you have access,
  and contact me ASAP if you do not.

- September 7 :: I have decided to cancel
  the Wednesday lecture for this week, in support
  of [[https://scholarstrikecanada.ca/][Scholar Strike Canada]] and their mission
  ‚Äúto protest anti-Black, racist and colonial police brutality
  in the U.S., Canada and elsewhere.‚Äù
  I encourage everyone to spend the lecture time
  and any other time you have that day on
  the public digital teach-ins they are offering.

  The scholar strike is planned for September 9^{th} and 10^{th}.
  Note that the Friday lecture on the 11^{th}
  will still take place as scheduled.
  Note also that there are no tutorials scheduled this week.


- September 6 :: As of this point, I am waiting on UTS to allow me
  access to the course Microsoft Teams team.
  If this is not done by Wednesday,
  we will be using Zoom for lectures until I am able
  to activate  the team.


- September 6 :: The course outline is in near complete state;
  I am still waiting for confirmation of the teaching assistants.
  - In particular, please review the information on grading;
    we will not be having midterm or final exams for this course.

** August
:PROPERTIES:
:CUSTOM_ID: August
:END:

- August 3 :: Incomplete course outline added to homepage.

* Notes
:PROPERTIES:
:CUSTOM_ID: Lecture-notes
:END:

** Lecture slides
:PROPERTIES:
:CUSTOM_ID: Lecture-slides
:END:

The slides are available as
- Online ~reveal.js~ 2-dimensional slideshows,
- printable PDFs, or
- text-editor friendly plaintext Org files.

*** 1 ‚Äì Introduction and overview
:PROPERTIES:
:CUSTOM_ID: 1-‚Äì-Introduction-and-Overview
:END:

- [[./notes/1--Introduction-and-overview.html][Online slides]]
- [[./notes/1--Introduction-and-overview.pdf][PDF]]
- [[./notes/1--Introduction-and-overview.org][Org plaintext]]

*** 2 ‚Äì Formal languages
:PROPERTIES:
:CUSTOM_ID: 2-‚Äì-Formal-languages
:END:

- [[./notes/2--Formal-languages.html][Online slides]]
- [[./notes/2--Formal-languages.pdf][PDF]]
- [[./notes/2--Formal-languages.org][Org plaintext]]

*** 3 ‚Äì An untyped Œª-calculus, /UL/
:PROPERTIES:
:CUSTOM_ID: 3-‚Äì-An-untyped-Œª-calculus,-/UL/
:END:

- [[./notes/3--An-untyped-lambda-calculus-UL.html][Online slides]]
- [[./notes/3--An-untyped-lambda-calculus-UL.pdf][PDF]]
- [[./notes/3--An-untyped-lambda-calculus-UL.org][Org plaintext]]

*** 4 ‚Äì Bindings and scope
:PROPERTIES:
:CUSTOM_ID: 4-‚Äì-Bindings-and-scope
:END:

- [[./notes/4--Bindings-and-scope.html][Online slides]]
- [[./notes/4--Bindings-and-scope.pdf][PDF]]
- [[./notes/4--Bindings-and-scope.org][Org plaintext]]

*** 5 ‚Äì Types
:PROPERTIES:
:CUSTOM_ID: 5-‚Äì-Types
:END:

- [[./notes/5--Types.html][Online slides]]
- [[./notes/5--Types.pdf][PDF]]
- [[./notes/5--Types.org][Org plaintext]]

*** 6 ‚Äì A typed Œª-calculus, /TL/
:PROPERTIES:
:CUSTOM_ID: 6-‚Äì-A-typed-Œª-calculus,-/TL/
:END:

- [[./notes/6--A-typed-lambda-calculus-TL.html][Online slides]]
- [[./notes/6--A-typed-lambda-calculus-TL.pdf][PDF]]
- [[./notes/6--A-typed-lambda-calculus-TL.org][Org plaintext]]

*** 7 ‚Äì Imperativeness
:PROPERTIES:
:CUSTOM_ID: 7-‚Äì-Imperativeness
:END:

- [[./notes/7--Imperativeness.html][Online slides]]
- [[./notes/7--Imperativeness.pdf][PDF]]
- [[./notes/7--Imperativeness.org][Org plaintext]]

*** 8 ‚Äì An imperative core, /WHILE/
:PROPERTIES:
:CUSTOM_ID: 8-‚Äì-An-imperative-core,-/WHILE/
:END:

- [[./notes/8--An-imperative-core-While.html][Online slides]]
- [[./notes/8--An-imperative-core-While.pdf][PDF]]
- [[./notes/8--An-imperative-core-While.org][Org plaintext]]

*** Appendix 1 ‚Äì Notation and conventions
:PROPERTIES:
:CUSTOM_ID: Appendix-1-‚Äì
:END:

- [[./notes/A1--Notation-and-conventions.html][Webpage]]
- [[./notes/A1--Notation-and-conventions.pdf][PDF]]
- [[./notes/A1--Notation-and-conventions.org][Org plaintext]]

*** Appendix 2 ‚Äì Software and tools
:PROPERTIES:
:CUSTOM_ID: Appendix-2-‚Äì
:END:

- [[./notes/A2--Software-and-tools.pdf][Webpage]]
- [[./notes/A2--Software-and-tools.pdf][PDF]]
- [[./notes/A2--Software-and-tools.org][Org plaintext]]

*** Appendix 3 ‚Äì External resources
:PROPERTIES:
:CUSTOM_ID: Appendix-3-‚Äì
:END:

- [[./notes/A3--External-resources.pdf][Webpage]]
- [[./notes/A3--External-resources.pdf][PDF]]
- [[./notes/A3--External-resources.org][Org plaintext]]

** Lecture hand-written notes
:PROPERTIES:
:CUSTOM_ID: Lecture-hand-written-notes
:END:

In some cases, some handwritten notes accompany the slides
during lecture. This term, those notes will be written
on paper that can be seen during the online lecture.

When necessary and possible,
those notes are scanned and made available here.
If any are missing that you would like to see, please ask.

- [[./notes/handwritten/sept30-currying.pdf][September 30th ‚Äì currying]]
- [[./notes/handwritten/sept23-trees.pdf][September 23rd ‚Äì Ambiguity in parse trees]]

* Literate programs
:PROPERTIES:
:CUSTOM_ID: Lecture-literate-programs
:END:

The last lecture of each week is usually
a hands-on live programming session.
Sometimes the same document is used for tutorials the following week.

Literate copies of the programs developed in those lectures and tutorials
are available here.
Particularly relevant portions of raw code are also included.

** Lectures
:PROPERTIES:
:CUSTOM_ID: Lectures
:END:

*** October 2nd ‚Äì Infinite data in Scala
:PROPERTIES:
:CUSTOM_ID: September-25th-‚Äì-Trees-in-Prolog
:END:

- [[./notes/live-coding/10-02-infinite-data-in-Scala.html][HTML]]
- [[./notes/live-coding/10-02-infinite-data-in-Scala.pdf][PDF]]
- [[./notes/live-coding/10-02-infinite-data-in-Scala.org][Org plaintext]]

Relevant raw code:
:TODO:

*** September 25th ‚Äì Trees in Prolog
:PROPERTIES:
:CUSTOM_ID: September-25th-‚Äì-Trees-in-Prolog
:END:

- [[./notes/live-coding/09-25-Trees-in-Prolog.html][HTML]]
- [[./notes/live-coding/09-25-Trees-in-Prolog.pdf][PDF]]
- [[./notes/live-coding/09-25-Trees-in-Prolog.org][Org plaintext]]

Relevant raw code:
- [[./notes/live-coding/src/tree.pl][The ~is_Tree~ predicates]] and some operations on trees.
  
*** September 18th ‚Äì Puzzles in Prolog
:PROPERTIES:
:CUSTOM_ID: September-18th-‚Äì-Puzzles-in-Prolog
:END:

- [[./notes/live-coding/09-18-Introduction-to-Prolog.html][HTML]]
- [[./notes/live-coding/09-18-Introduction-to-Prolog.pdf][PDF]]
- [[./notes/live-coding/09-18-Introduction-to-Prolog.org][Org plaintext]]

Relevant raw code:
:TODO:

*** September 14th ‚Äì The Boom hierarchy in Scala
:PROPERTIES:
:CUSTOM_ID: September-14th-‚Äì-The-Boom-hierarchy-in-Scala
:END:

- [[./notes/live-coding/09-14-Boom-hierarchy-in-Scala.html][HTML]]
- [[./notes/live-coding/09-14-Boom-hierarchy-in-Scala.pdf][PDF]]
- [[./notes/live-coding/09-14-Boom-hierarchy-in-Scala.org][Org plaintext]]

Relevant raw code:
- [[./notes/live-coding/src/ConsList.sc][The ~ConsList~ type]] and some operations on it.

** Tutorials
:PROPERTIES:
:CUSTOM_ID: Tutorials
:END:

Files from the Wednesday tutorial, led by Habib, are collected here.
In most cases, the material is largely similar to the
material from the lecture notes.

*** Wednesday September 30th ‚Äì Trees in Prolog
:PROPERTIES:
:CUSTOM_ID: Wednesday-September-30th-‚Äì-Trees-in-Prolog
:END:

- [[https://github.com/armkeh/principles-of-programming-languages/blob/master/notes/tutorial/Constructing%20a%20Tree%20Using%20the%20Prolog.ipynb][Prettified Jupyter notebook on GitHub]]
- [[./notes/tutorial/Constructing a Tree using the Prolog.ipynb][Jupyter notebook source]]
- [[./notes/tutorial/Constructing a Tree using the Prolog.pdf][PDF]]

*** Wednesday September 23rd ‚Äì Docker and Prolog
:PROPERTIES:
:CUSTOM_ID: Wednesday-September-23rd-‚Äì-Docker-and-Prolog
:END:

- [[https://github.com/armkeh/principles-of-programming-languages/blob/master/notes/tutorial/Introduction%20to%20Docker%20and%20Prolog.ipynb][Prettified Jupyter notebook on GitHub]]
- [[./notes/tutorial/Introduction to Docker and Prolog.ipynb][Jupyter notebook source]]
- [[./notes/tutorial/Introduction to Docker and Prolog.pdf][PDF]]

* Recordings
:PROPERTIES:
:CUSTOM_ID: Recordings
:END:

Lecture and tutorial recordings are available on Microsoft Stream.
As long as you are registered in the course,
the full list should be available
[[https://web.microsoftstream.com/group/16cec1b5-2ab3-4af9-9120-2ea9091b20c5?view=videos][here]].

Links directly to specific lectures/tutorials are also included below,
but this may not be updated quickly after lectures/tutorials.

** Note lectures
:PROPERTIES:
:CUSTOM_ID: Lectures
:END:

These lectures cover material from the [[Notes]] section of the website,
and usually take place on Mondays and Wednesdays.

- [[https://web.microsoftstream.com/video/7c37e57d-4c10-4cae-914d-89b4e2e58a92][September 30th (Wednesday) ‚Äì An untyped Œª-calculus, /UL/]]
- [[https://web.microsoftstream.com/video/bed4dad7-dc7f-4721-8795-3c4d6d956a37][September 28th (Monday) ‚Äì Formal languages (part 4)]]
  - (also the beginning of ‚ÄúAn untyped Œª-calculus, /UL/‚Äù)
- [[https://web.microsoftstream.com/video/56841a6d-5ae0-4378-8c0d-ed7cce18a614][September 23rd (Wednesday) ‚Äì Formal language (part 3)]]
- [[https://web.microsoftstream.com/video/d7d61b56-b593-4c48-8890-b03e9ff71015][September 21st (Monday) ‚Äì Formal languages (part 2)]]
- [[https://web.microsoftstream.com/video/6aa707fa-3e68-4b61-8f6c-ed60e62f3b14][September 16th (Wednesday) ‚Äì Formal languages (part 1)]]
- [[https://web.microsoftstream.com/video/fe0b46f8-2512-4084-a399-f9d1b33257b6][September 14th (Monday) ‚Äì The Boom hierarchy in Scala]]
  - (also the end of ‚ÄúIntroduction and Overview‚Äù notes)
- [[https://web.microsoftstream.com/video/af55c09e-00dc-4d7c-a048-166907b6abd7][September 11th (Friday) ‚Äì Introduction and Overview]]

** Live coding lectures
:PROPERTIES:
:CUSTOM_ID: Live-coding-lectures
:END:

These lectures cover supplementary materials,
found in the [[Literate programs]] section of the website.
Usually this material lays the groundwork for the weeks homework.
These lectures usually take place on Fridays.

- [[https://web.microsoftstream.com/video/6201a5a8-3757-4dc4-bb98-ff49628f4639][September 25th (Friday) ‚Äì Trees in Prolog]]
- [[https://web.microsoftstream.com/video/f29fc2dd-f3c0-40f6-9e67-a81eeb273065][September 18th (Friday) ‚Äì Logical games in Prolog]]
- [[https://web.microsoftstream.com/video/fe0b46f8-2512-4084-a399-f9d1b33257b6][September 14th (Monday) ‚Äì The Boom hierarchy in Scala]]

** Tutorials
:PROPERTIES:
:CUSTOM_ID: Tutorials
:END:

The contents of each week's tutorials is usually consistent
across the two tutorials.
We will put a note here in the case that there is a significant
difference between Monday and Wednesday.

- [[https://web.microsoftstream.com/video/bb9938cd-ffec-43e6-b9d4-3a1e93b1ce2a][Week 3 Wednesday, September 30th ‚Äì More trees in Prolog]] (Habib)
- [[https://web.microsoftstream.com/video/7a37a812-9955-4edd-a08f-bd0d95ce4c25][Week 3 Monday, September 28th ‚Äì More trees in Prolog]] (Mark)
- [[https://web.microsoftstream.com/video/8f852c44-7249-42ca-9fc0-acc21578ecd5][Week 2 Wednesday, September 23rd ‚Äì Docker, Introduction to Prolog]] (Habib)
  - Covers Docker, which the Monday tutorial did not.
- [[https://web.microsoftstream.com/video/dd31d267-6de5-4cc1-afae-8e81b126d3f8][Week 2 Monday, September 21st ‚Äì Introduction to Prolog]] (Mark)
  - Discusses Prolog with a little more depth than the Wednesday tutorial.
- [[https://web.microsoftstream.com/video/da69ad32-13c9-4e26-904e-e06a66c3b537][Week 2 Wednesday, September 16th ‚Äì Algebraic data in Scala]] (Mark)
- [[https://web.microsoftstream.com/video/1f99aa1e-ee5e-4bb4-a27c-6c32175332fd][Week 2 Monday, September 14th ‚Äì Algebraic data in Scala]] (Mark)
  
* Homework
:PROPERTIES:
:CUSTOM_ID: Course-Work
:END:

** Current homeworks
:PROPERTIES:
:CUSTOM_ID: Current-homeworks
:END:

*** Homework 3 ‚Äì Revisiting homework 1 in Prolog and homework 2 in Scala ‚Äì Sept 25th to Oct 4th
:PROPERTIES:
:CUSTOM_ID: Homework-3-‚Äì-Revisiting-homework-1-in-Prolog-and-homework-2-in-Scala-‚Äì-Sept-25th-to-Oct-4th
:END:

- [[./homework/h3.html][HTML]]
- [[./homework/h3.pdf][PDF]]
- [[./homework/h3.org][Org plaintext]]

** Homework testing policy
:PROPERTIES:
:CUSTOM_ID: Homework-testing-policy
:END:

As of homework 2, automated unit tests are provided.
A Docker image is also provided, in order to ensure that
you are able to run the tests in the same environment
that we will run them in.

Passing the provided tests is /mandatory/.
And unless other issues are found, passing the tests
should imply you will receive a passing grade on the homework.
- But no particular grade is guaranteed.

The automated testing we run during marking will typically
include some number of additional tests,
usually chosen to test ‚Äúedge cases‚Äù.
You are encouraged to try and think of these cases yourselves,
and add appropriate tests to the provided ones
in order to better check your solutions.
This is not required though; a uniform set of tests
will be used for every student's submission.

** Previous homeworks
:PROPERTIES:
:CUSTOM_ID: Previous-homeworks
:END:

*** Homework 2 ‚Äì Solving problems in Prolog ‚Äì Sept 18th to Sept 27th
:PROPERTIES:
:CUSTOM_ID: Homework-2-‚Äì-Solving-problems-in-Prolog-‚Äì-Sept-18th-to-Sept-27th
:END:

- [[./homework/h2.html][HTML]]
- [[./homework/h2.pdf][PDF]]
- [[./homework/h2.org][Org plaintext]]
  
*** Homework 1 ‚Äì Implementing Trees in Scala ‚Äì Sept 11th to Sept 20th
:PROPERTIES:
:CUSTOM_ID: Homework-1-‚Äì-Implementing-Trees-in-Scala-‚Äì-Sept-11th-to-Sept-20th
:END:

- [[./homework/h1.html][HTML]]
- [[./homework/h1.pdf][PDF]]
- [[./homework/h1.org][Org plaintext]]

* Assignments
:PROPERTIES:
:CUSTOM_ID: Assignments
:END:

** Assignment 1 ‚Äì Interpreting simple integer expressions ‚Äì Sept 26th to Oct 21st.
:PROPERTIES:
:CUSTOM_ID: Assignment-1-‚Äì-Interpreting-simple-integer-expressions-‚Äì-Sept-26th-to-Oct-21st.
:END:

- [[./assignments/a1.html][HTML]]
- [[./assignments/a1.pdf][PDF]]
- [[./assignments/a1.org][Org plaintext]]

** Assignment testing policy
:PROPERTIES:
:CUSTOM_ID: Assignment-testing-policy
:END:

Automated unit tests will be provided for all assignments.
A Docker image is also provided, in order to ensure that
you are able to run the tests in the same environment
that we will run them in.

Passing the provided tests is /mandatory/.
But unlike the homeworks, passing the provided tests
does *not* necessarily mean you will receive
a passing grade on the assignment.
The assignment grades are more heavily influenced
by a code inspection.

As with the homework,
the automated testing we run during marking will typically
include some number of additional tests,
usually chosen to test ‚Äúedge cases‚Äù.
You are encouraged to try and think of these cases yourselves,
and add appropriate tests to the provided ones
in order to better check your solutions.
This is not required though; a uniform set of tests
will be used for every student's submission.

* Course outline
:PROPERTIES:
:CUSTOM_ID: Course-outline
:END:

The course outline is available as
- a printer friendly [[file:./notes/0--Course-outline.pdf][PDF]],
- a screen friendly [[file:./notes/0--Course-outline.html][webpage]], or
- a text-editor friendly [[file:./notes/0--Course-outline.org][Org]] file.

The PDF is also embedded here for convenience.
@@html:<iframe src="notes/0--Course-outline.pdf" style="width: 100%; height: 75vh"></iframe>@@

* Scala
:PROPERTIES:
:CUSTOM_ID: Scala
:END:

** Installation instructions
:PROPERTIES:
:CUSTOM_ID: Installation-instructions
:END:

#+INCLUDE: "./homework/h1.org::*Part 0.1: Installing Scala                  [0¬†points]" :only-contents t

* Prolog
:PROPERTIES:
:CUSTOM_ID: Prolog
:END:

Answers to some common or interesting questions regarding Prolog
can be found in the Prolog tidbits file, available as
- an [[./language-tidbits/prolog.html][HTML site]],
- a [[./language-tidbits/prolog.pdf][PDF]], or
- a plaintext [[./language-tidbits/prolog.org][Org document]].

** Installation instructions
:PROPERTIES:
:CUSTOM_ID: Installation-instructions
:END:

#+INCLUDE: "./homework/h2.org::* Part 0.1: Installing Prolog                            [0¬†points]" :only-contents t

* Ruby
:PROPERTIES:
:CUSTOM_ID: Ruby
:END:

:TODO:

* Clojure
:PROPERTIES:
:CUSTOM_ID: Clojure
:END:

:TODO:
