#+Title: Introduction and overview
#+Subtitle: Principles of Programming Languages
#+Author: Mark Armstrong
#+Date: Fall 2020
#+Description: An introduction and a brief overview of topics we will
#+Description: discuss in the course.
#+Options: toc:nil

* HTML settings                                 :noexport:

** Reveal settings

#+Reveal_root: ./reveal.js
#+Reveal_init_options: width:1600, height:900, controlsLayout:'edges',
#+Reveal_init_options: margin: 0.1, minScale:0.125, maxScale:5
#+Reveal_extra_css: local.css

# #+HTML: <script src="https://cdnjs.cloudflare.com/ajax/libs/headjs/0.96/head.min.js"></script>

* LaTeX settings                                :noexport:

#+LaTeX_header: \usepackage{amsthm}
#+LaTeX_header: \theoremstyle{definition}
#+LaTeX_header: \newtheorem{definition}{Definition}[section]

#+LaTeX_header: \usepackage{unicode-math}
#+LaTeX_header: \usepackage{unicode}

* Preamble
:PROPERTIES:
:CUSTOM_ID: Preamble
:END:

** Explanation of preamble                     :ignore:

The preamble section of each notes will include
- notable references,
  - i.e., specific chapters of our recommended/additional texts
    from which the notes are derived, or which expand on the notes,
- a table of contents, and
- an update history, chronicling any major changes.
  - Note the git commit history will provide a more fine-grained
    record of upates.

** TODO Notable references
:PROPERTIES:
:CUSTOM_ID: Notable-references
:END:

:TODO:

** TODO Table of contents
:PROPERTIES:
:CUSTOM_ID: Table-of-contents
:END:

# The table of contents are added using org-reveal-manual-toc,
# and so must be updated upon changes or added last.
# Note that hidden headings are included, and so must be deleted!

#+HTML: <font size="-1">
#+begin_scriptsize
  - [[Preamble][Preamble]]
#+end_scriptsize
#+HTML: </font>

* Introduction
:PROPERTIES:
:CUSTOM_ID: Introduction
:END:

This section of notes introduces the course and the staff,
and lays out a few central concepts.

* Welcome
:PROPERTIES:
:CUSTOM_ID: Welcome
:END:

#+begin_center
#+attr_html: :style text-align:center
Welcome to the course!
#+end_center

** Instructor: Mark Armstrong
:PROPERTIES:
:CUSTOM_ID: Instructor:-Mark-Armstrong
:END:

#+begin_quote
#+attr_org: :width 200px
#+attr_html: :width 200px
#+attr_latex: :width 200px
#+attr_html: :alt Mark Armstrong photo
[[./media/markarmstrong.jpg]]
#+end_quote

- Email: [[mailto:armstmp@mcmaster.ca]]
- Website: https://armkeh.github.io

** Teaching assistants
:PROPERTIES:
:CUSTOM_ID: Teaching-assistants
:END:

:TODO:

* Purpose and goals of this course
:PROPERTIES:
:CUSTOM_ID: Purpose-and-goals-of-this-course
:END:

** Calendar description
:PROPERTIES:
:CUSTOM_ID: Calendar-description
:END:

Design space of programming languages;
abstraction and modularization concepts and mechanisms;
programming in non-procedural (functional and logic) paradigms;
introduction to programming language semantics.

** Informal objectives
:PROPERTIES:
:CUSTOM_ID: Informal-objectives
:END:

- Investigate a number of programming languages
  which exemplify different paradigms.
  - A relatively shallow but comprehensive survey.
  - Focusing on general-purpose languages.
- /Formally/ describe programming language syntax and semantics.
  - An application of theory learned previously.
- Apply various abstraction and modularisation techniques,
  - Learning how to apply them and
    to which situations they are best applied.

** Course preconditions
:PROPERTIES:
:CUSTOM_ID: Course-preconditions
:END:

Before beginning this course:

1. Students should know and understand:
   a. Basic concepts about integers, sets, functions, & relations.
   b. Induction and recursion.
   c. First order logic, axiomatic theories & simple proof techniques.
   d. Regular expressions & context-free grammars.
   e. Programming in imperative languages.
   f. Basic concepts of functional programming languages.
2. Students should be able to:
   a. Produce proofs involving quantifiers and/or induction.
   b. Understand the meaning of a given axiomatic theory.
   c. Construct regular sets & context-free languages.
   d. Produce small to medium scale programs in imperative languages.
   e. Produce small scale programs in functional languages.

** Course postconditions
:PROPERTIES:
:CUSTOM_ID: Course-postconditions
:END:

After completion of this course:

1. Students should know and understand:
   a. Programming in functional languages.
   b. Programming in logical languages.
   c. Formal definitions of syntax & semantics for various
      simple programming languages.
   d. Various abstraction & modularisation techniques
      employed in programming languages.
2. Students should be able to:
   a. Reason about the design space of programming languages,
      in particular tradeoffs & design issues.
   b. Produce formal descriptions of syntax & semantics
      from informal descriptions, identifying ambiguities.
   c. Select appropriate abstraction & modularisation techniques
      for a given problem.
   d. Produce tools for domain-specific languages
      in imperative, functional and logical languages.

** Formal rubric for the course
:PROPERTIES:
:CUSTOM_ID: Formal-rubric-for-the-course
:END:

#+HTML: <font size="-1">
#+begin_scriptsize
+--------------+------------+--------------+------------+------------+
|Topic         | Below      | Marginal     | Meets      | Exceeds    |
+--------------+------------+--------------+------------+------------+
|Familiarity   |Shows some  |Shows         |Achieves    |Achieves    |
|with various  |competence  |competence    |competence  |competence  |
|programming   |in          |in            |with the    |with        |
|languages     |procedural  |procedural    |basic       |intermediate|
|              |languages,  |languages     |usage of    |usage of    |
|              |but not     |and limited   |various     |various     |
|              |languages   |competence    |languages   |languages   |
|              |from other  |in            |            |            |
|              |paradigms   |languages     |            |            |
|              |            |from other    |            |            |
|              |            |paradigms     |            |            |
+--------------+------------+--------------+------------+------------+
|Ability to    |Cannot      |Identifies    |Identifies  |Identifies  |
|identify and  |consistently|such          |such        |sucj        |
|make use of   |identify    |constructs,   |constructs  |constructs  |
|abstraction,  |such        |but does not  |and shows   |and shows   |
|modularisation|constructs  |consistently  |some ability|mastery of  |
|constructs    |            |make use of   |to make use |them when   |
|              |            |them when     |of them when|programming |
|              |            |programming   |programming |            |
+--------------+------------+--------------+------------+------------+
|Ability to    |Unable or   |Comprehends   |Makes only  |Consistently|
|comprehend and|rarely      |given         |minor       |fully       |
|produce formal|able to     |grammars,     |errors      |understands |
|descriptions  |comprehend  |but           |regarding   |given       |
|of PL syntax  |given       |produces      |precedence  |grammars and|
|              |grammars;   |grammars      |or          |produces    |
|              |does not    |which are     |ambiguity   |correct     |
|              |identify    |ambiguous     |when        |grammars.   |
|              |ambiguity   |or which do   |reading or  |            |
|              |or          |not           |producing   |            |
|              |precedence  |correctly     |grammars    |            |
|              |rules       |specify       |            |            |
|              |            |precedence    |            |            |
+--------------+------------+--------------+------------+------------+
|Ability to    |Rarely or   |Usually       |Comprehends |Comprehends |
|comprehend and|never       |comprehends   |such        |such        |
|produce       |comprehends |such semantic |semantic    |semantic    |
|operational   |such        |descriptions, |descriptions|descriptions|
|semantics for |semantic    |but cannot    |and produces|and produces|
|simple PLs    |descriptions|consistently  |them with   |them without|
|              |            |produce them  |only minor  |errors      |
|              |            |              |errors      |            |
+--------------+------------+--------------+------------+------------+
#+end_scriptsize
#+HTML: </font>

* “Principles of programming languages”
:PROPERTIES:
:CUSTOM_ID: “Principles-of-programming-languages”
:END:

We begin the course with these fundamental questions.

- What is a /programming language/?
- What are the /components/ of a programming language?
- How do we /classify/ a programming language?

** What is a programming language?

- A /formal/, /finitely described/ language used for
  describing (in most cases, potentially infinite) /processes/.
  - /Formal/ meaning described by a mathematical tool.
    - Formality is necessary for a machine to understand the language.
    - Natural (human-spoken) languages are not formal.
  - A /process/ being some sequence of actions or steps.

*** Example of a process

Consider the mathematical function $f(x) = x + 10$.
- On its own, this function is not a process;
  - it is only a /rule/ that $f(x)$ is related to $x + 10$.

However, you likely learned as a child
a “program” describing the process for calculating $f(x)$.
#+begin_src text
start with all your fingers down
say “x” 
repeat until you run out of fingers:
  say the result of adding one to the number you just said
  put up one finger
the answer is the last number you said
#+end_src

In computing, we sometimes conflate programs and (mathematical) functions.
- Sometimes, we must remember they are not the same.
- Mathematical functions are rules. They do no computing.
- Programs describe a sequences of steps.
  They may tell us how to compute
  the results of mathematical functions.

** What are the components of a programming language?

Just like a natural language, a programming language consists of
- /syntactic/ rules
  - which describe the legal forms of programs, and
- /semantics/ rules
  - which describe the meaning of legal programs,
    - if they in fact have a meaning!

*** Syntax and semantics example

For example, English syntax tells us a sentence structured
#+begin_src text
adjective adjective (plural noun) (plural verb) adverb
#+end_src
is grammatically correct.

In the same way, a Python compiler tells us a program of the form
#+begin_src python
expression + expression
#+end_src
is syntactically correct.

Note that in both cases, though, such sentences/programs
may be meaningless!
Noam Chomsky gave the example
#+begin_quote
Colourless green ideas sleep furiously.
#+end_quote

And we could construct the Python program
#+begin_src python
1 + "hello"
#+end_src
which crashes when run.

*** Exercise: a meaningless C or Java program

Our example Python program above
#+begin_src python
1 + "hello"
#+end_src
is syntactically correct because Python is /dynamically typed/,
meaning that type errors such as this are not caught until runtime.

As an exercise, can you construct a similar example
of a program which is syntactically correct
but semantically meaningless in the /statically typed/ languages
C and Java?

Hint: consider using a value which does not have just one type.

** How do we classify a programming language?

First and foremost, we classify languages into /paradigms/,
- characterised by the set of /abstractions/ the language makes available.

But also in many other ways, such as:
- Typing properties, including
  - static or dynamic (runtime) typechecking,
  - “weak” or “strong” typing discipline,
  - polymorphism support, builtin types, methods of defining new types, etc.
- (Primary) implementation strategy: compiled or interpreted?
- Ancestery or culture.
  - “Scripting languages”
  - “JVM languages”
  - “The C-family”
    - https://en.wikipedia.org/wiki/List_of_C-family_programming_languages

* TODO Abstraction
:PROPERTIES:
:CUSTOM_ID: Abstraction
:END:


:TODO:

* TODO Exercises
:PROPERTIES:
:CUSTOM_ID: Exercises
:END:
