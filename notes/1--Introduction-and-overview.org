#+Title: Introduction and overview
#+Subtitle: Principles of Programming Languages
#+Author: Mark Armstrong
#+Date: Fall 2020
#+Description: An introduction and a brief overview of topics we will
#+Description: discuss in the course.
#+Options: toc:nil

* HTML settings                                 :noexport:

** Reveal settings

#+Reveal_root: ./reveal.js
#+Reveal_init_options: width:1600, height:900, controlsLayout:'edges',
#+Reveal_init_options: margin: 0.1, minScale:0.125, maxScale:5
#+Reveal_extra_css: local.css

# #+HTML: <script src="https://cdnjs.cloudflare.com/ajax/libs/headjs/0.96/head.min.js"></script>

* LaTeX settings                                :noexport:

#+LaTeX_header: \usepackage{amsthm}
#+LaTeX_header: \theoremstyle{definition}
#+LaTeX_header: \newtheorem{definition}{Definition}[section]

#+LaTeX_header: \usepackage{unicode-math}
#+LaTeX_header: \usepackage{unicode}

* Preamble
:PROPERTIES:
:CUSTOM_ID: Preamble
:END:

** Explanation of preamble                     :ignore:

The preamble section of each notes will include
- an introduction to the material covered in the section,
- any notable references,
  - i.e., specific chapters of our recommended/additional texts
    from which the notes are derived, or which expand on the notes,
- a table of contents, and
- if necessary, an update history, chronicling any major changes.
  - Note the git commit history will provide a more fine-grained
    record of upates.

** Introduction
:PROPERTIES:
:CUSTOM_ID: Introduction
:END:

This section of notes introduces the course and the staff,
and lays out a few central concepts.

** Notable references
:PROPERTIES:
:CUSTOM_ID: Notable-references
:END:

- Peter Van Roy and Seif Haridi,
  “[[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.102.7366&rep=rep1&type=pdf][Concepts, Techniques, and Models of Computer Programming]]”,
  Preface
- Peter Van Roy, “[[https://www.info.ucl.ac.be/~pvr/VanRoyChapter.pdf][Programming Paradigms for Dummies: What Every Programmer Should Know]]”
- Robert W. Sebesta, “Concepts of Programming Languages” (10th edition)

** Table of comments

# The table of contents are added using org-reveal-manual-toc,
# and so must be updated upon changes or added last.
# Note that hidden headings are included, and so must be deleted!

#+HTML: <font size="-1">
#+begin_scriptsize
  - [[Preamble][Preamble]]
    - [[Introduction][Introduction]]
    - [[Notable references][Notable references]]
    - [[Table of comments][Table of comments]]
  - [[Welcome][Welcome]]
    - [[Instructor: Mark Armstrong][Instructor: Mark Armstrong]]
    - [[Teaching assistant: Habib Ghaffari-Hadigheh][Teaching assistant: Habib Ghaffari-Hadigheh]]
  - [[Purpose and goals of this course][Purpose and goals of this course]]
    - [[Calendar description][Calendar description]]
    - [[Informal objectives][Informal objectives]]
    - [[Course preconditions][Course preconditions]]
    - [[Course postconditions][Course postconditions]]
    - [[Formal rubric for the course][Formal rubric for the course]]
  - [[“Principles of programming languages”][“Principles of programming languages”]]
    - [[What is a programming language?][What is a programming language?]]
      - [[Example of a process][Example of a process]]
    - [[What are the components of a programming language?][What are the components of a programming language?]]
      - [[Syntax and semantics example][Syntax and semantics example]]
      - [[Exercise: a meaningless C or Java program][Exercise: a meaningless C or Java program]]
    - [[How do we classify a programming language?][How do we classify a programming language?]]
  - [[Abstraction][Abstraction]]
    - [[Preamble][Preamble]]
    - [[Dijkstra on abstraction][Dijkstra on abstraction]]
    - [[Example: sorting][Example: sorting]]
    - [[“Leaky” abstractions][“Leaky” abstractions]]
    - [[A taxonomy of programming paradigms by abstraction support][A taxonomy of programming paradigms by abstraction support]]
    - [[Abstractions throughout this course][Abstractions throughout this course]]
  - [[Exercises][Exercises]]
#+end_scriptsize
#+HTML: </font>

* Welcome
:PROPERTIES:
:CUSTOM_ID: Welcome
:END:

#+begin_center
#+attr_html: :style text-align:center
Welcome to the course!
#+end_center

** Instructor: Mark Armstrong
:PROPERTIES:
:CUSTOM_ID: Instructor:-Mark-Armstrong
:END:

#+begin_quote
#+attr_org: :width 200px
#+attr_html: :width 200px
#+attr_latex: :width 200px
#+attr_html: :alt Mark Armstrong photo
[[./media/markarmstrong.jpg]]
#+end_quote

- Email: [[mailto:armstmp@mcmaster.ca][armstmp@mcmaster.ca]]
- Website: https://armkeh.github.io

(Digital) office/student conference hours available on request.

** Teaching assistant: Habib Ghaffari-Hadigheh
:PROPERTIES:
:CUSTOM_ID: Teaching-assistants
:END:

#+begin_quote
#+attr_org: :width 200px
#+attr_html: :width 200px
#+attr_latex: :width 200px
#+attr_html: :alt Habib Ghaffari-Hadigheh
[[./media/habibghaffarihadigheh.jpg]]
#+end_quote

- Email: [[mailto:ghaff1@mcmaster.ca][ghaffh1@mcmaster.ca]]
- Website: https://ghhabib.me/

(Digital) office/student conference hours available on request.

* Purpose and goals of this course
:PROPERTIES:
:CUSTOM_ID: Purpose-and-goals-of-this-course
:END:

** Preamble                                    :ignore:

Here we provide both formal and informal descriptions
and goals for this course.

** Calendar description
:PROPERTIES:
:CUSTOM_ID: Calendar-description
:END:

Design space of programming languages;
abstraction and modularization concepts and mechanisms;
programming in non-procedural (functional and logic) paradigms;
introduction to programming language semantics.

** Informal objectives
:PROPERTIES:
:CUSTOM_ID: Informal-objectives
:END:

- Investigate a number of programming languages
  which exemplify different paradigms.
  - A relatively shallow but comprehensive survey.
  - Focusing on general-purpose languages.
- /Formally/ describe programming language syntax and semantics.
  - An application of theory learned previously.
- Apply various abstraction and modularisation techniques,
  - Learning how to apply them and
    to which situations they are best applied.

** Course preconditions
:PROPERTIES:
:CUSTOM_ID: Course-preconditions
:END:

Before beginning this course:

1. Students should know and understand:
   1. Basic concepts about integers, sets, functions, & relations.
   2. Induction and recursion.
   3. First order logic, axiomatic theories & simple proof techniques.
   4. Regular expressions & context-free grammars.
   5. Programming in imperative languages.
   6. Basic concepts of functional programming languages.
2. Students should be able to:
   1. Produce proofs involving quantifiers and/or induction.
   2. Understand the meaning of a given axiomatic theory.
   3. Construct regular sets & context-free languages.
   4. Produce small to medium scale programs in imperative languages.
   5. Produce small scale programs in functional languages.

** Course postconditions
:PROPERTIES:
:CUSTOM_ID: Course-postconditions
:END:

After completion of this course:

1. Students should know and understand:
   1. Programming in functional languages.
   2. Programming in logical languages.
   3. Formal definitions of syntax & semantics for various
      simple programming languages.
   4. Various abstraction & modularisation techniques
      employed in programming languages.
2. Students should be able to:
   1. Reason about the design space of programming languages,
      in particular tradeoffs & design issues.
   2. Produce formal descriptions of syntax & semantics
      from informal descriptions, identifying ambiguities.
   3. Select appropriate abstraction & modularisation techniques
      for a given problem.
   4. Produce tools for domain-specific languages
      in imperative, functional and logical languages.

** Formal rubric for the course
:PROPERTIES:
:CUSTOM_ID: Formal-rubric-for-the-course
:END:

#+HTML: <font size="-1">
#+begin_scriptsize
+--------------+------------+--------------+------------+------------+
|Topic         | Below      | Marginal     | Meets      | Exceeds    |
+--------------+------------+--------------+------------+------------+
|Familiarity   |Shows some  |Shows         |Achieves    |Achieves    |
|with various  |competence  |competence    |competence  |competence  |
|programming   |in          |in            |with the    |with        |
|languages     |procedural  |procedural    |basic       |intermediate|
|              |languages,  |languages     |usage of    |usage of    |
|              |but not     |and limited   |various     |various     |
|              |languages   |competence    |languages   |languages   |
|              |from other  |in            |            |            |
|              |paradigms   |languages     |            |            |
|              |            |from other    |            |            |
|              |            |paradigms     |            |            |
+--------------+------------+--------------+------------+------------+
|Ability to    |Cannot      |Identifies    |Identifies  |Identifies  |
|identify and  |consistently|such          |such        |sucj        |
|make use of   |identify    |constructs,   |constructs  |constructs  |
|abstraction,  |such        |but does not  |and shows   |and shows   |
|modularisation|constructs  |consistently  |some ability|mastery of  |
|constructs    |            |make use of   |to make use |them when   |
|              |            |them when     |of them when|programming |
|              |            |programming   |programming |            |
+--------------+------------+--------------+------------+------------+
|Ability to    |Unable or   |Comprehends   |Makes only  |Consistently|
|comprehend and|rarely      |given         |minor       |fully       |
|produce formal|able to     |grammars,     |errors      |understands |
|descriptions  |comprehend  |but           |regarding   |given       |
|of PL syntax  |given       |produces      |precedence  |grammars and|
|              |grammars;   |grammars      |or          |produces    |
|              |does not    |which are     |ambiguity   |correct     |
|              |identify    |ambiguous     |when        |grammars.   |
|              |ambiguity   |or which do   |reading or  |            |
|              |or          |not           |producing   |            |
|              |precedence  |correctly     |grammars    |            |
|              |rules       |specify       |            |            |
|              |            |precedence    |            |            |
+--------------+------------+--------------+------------+------------+
|Ability to    |Rarely or   |Usually       |Comprehends |Comprehends |
|comprehend and|never       |comprehends   |such        |such        |
|produce       |comprehends |such semantic |semantic    |semantic    |
|operational   |such        |descriptions, |descriptions|descriptions|
|semantics for |semantic    |but cannot    |and produces|and produces|
|simple PLs    |descriptions|consistently  |them with   |them without|
|              |            |produce them  |only minor  |errors      |
|              |            |              |errors      |            |
+--------------+------------+--------------+------------+------------+
#+end_scriptsize
#+HTML: </font>

* “Principles of programming languages”
:PROPERTIES:
:CUSTOM_ID: “Principles-of-programming-languages”
:END:

** Preamble                                    :ignore:

We begin the course with these fundamental questions.

- What is a /programming language/?
- What are the /components/ of a programming language?
- How do we /classify/ a programming language?

** What is a programming language?

- A /formal/, /finitely described/ language used for
  describing (in most cases, potentially infinite) /processes/.
  - /Formal/ meaning described by a mathematical tool.
    - Formality is necessary for a machine to understand the language.
    - Natural (human-spoken) languages are not formal.
  - A /process/ being some sequence of actions or steps.

*** “I know what I mean!”

Sometimes, the requirement of a formal language is a pain.

#+begin_quote
[[./media/comics/well_2.png]]
#+end_quote
From the ~xkcd~ comic “[[https://xkcd.com/568/][Well 2]]” 

*** Example of a process

Consider the mathematical function $f(x) = x + 10$.
- On its own, this function is not a process;
  - it is only a /rule/ that $f(x)$ is related to $x + 10$.

However, you likely learned as a child
a “program” describing the process for calculating $f(x)$.
#+begin_src text
start with all your fingers down
say “x” 
repeat until you run out of fingers:
  say the result of adding one to the number you just said
  put up one finger
the answer is the last number you said
#+end_src

In computing, we sometimes conflate programs and (mathematical) functions.
- Sometimes, we must remember they are not the same.
- Mathematical functions are rules. They do no computing.
- Programs describe a sequences of steps.
  They may tell us how to compute
  the results of mathematical functions.

** What are the components of a programming language?

Just like a natural language, a programming language consists of
- /syntactic/ rules
  - which describe the legal forms of programs, and
- /semantics/ rules
  - which describe the meaning of legal programs,
    - if they in fact have a meaning!

*** Syntax and semantics example

For example, English syntax tells us a sentence structured
#+begin_src text
adjective adjective (plural noun) (plural verb) adverb
#+end_src
is grammatically correct.

In the same way, a Python compiler tells us a program of the form
#+begin_src python
expression + expression
#+end_src
is syntactically correct.

Note that in both cases, though, such sentences/programs
may be meaningless!
Noam Chomsky gave the example
#+begin_quote
Colourless green ideas sleep furiously.
#+end_quote

And we could construct the Python program
#+begin_src python
1 + "hello"
#+end_src
which crashes when run.

*** Exercise: a meaningless C or Java program

Our example Python program above
#+begin_src python
1 + "hello"
#+end_src
is syntactically correct because Python is /dynamically typed/,
meaning that type errors such as this are not caught until runtime.

As an exercise, can you construct a similar example
of a program which is syntactically correct
but semantically meaningless in the /statically typed/ languages
C and Java?

Hint: consider using a value which does not have just one type.

** How do we classify a programming language?

First and foremost, we classify languages into /paradigms/,
- characterised by the set of /abstractions/ the language makes available.

But also in many other ways, such as:
- Typing properties, including
  - static or dynamic (runtime) typechecking,
  - “weak” or “strong” typing discipline,
  - polymorphism support, builtin types, methods of defining new types, etc.
- “High” or “low” level languages.
- (Primary) implementation strategy: compiled or interpreted?
- Ancestery or culture.
  - “Scripting languages”
  - “JVM languages”
  - “The C-family”
    - https://en.wikipedia.org/wiki/List_of_C-family_programming_languages

* Abstraction
:PROPERTIES:
:CUSTOM_ID: Abstraction
:END:

** Preamble                                    :ignore:

In “Concepts, Techniques and Models of Computer Programming”,
Peter Van Roy and Seif Haridi offer this definition of abstraction.
#+begin_quote
We define an
abstraction loosely as a tool or device that solves a particular problem. Usually the
same abstraction can be used to solve many different problems. This versatility
is one of the key properties of abstractions.
#+end_quote

In “Concepts of Programming Languages” (10th edition), Robert W. Sebesta
defines it so.
#+begin_quote
Briefly, abstraction means the ability to define and then use
complicated structures or operations in ways
that allow many of the details to be ignored.
#+end_quote

** Dijkstra on abstraction

- A key feature of abstractions is that they let us set aside details
  and work at a /higher level/.
- It is a common misconception that abstractions simply ignore details,
  and in doing so lose precision.
  - This thinking makes abstraction seem harmful.
- Instead, abstraction involves selecting
  - which details are relevant to the problem at hand, and
  - which details are irrelevant to the problem at hand.
- When we set aside details that are irrelevant to a problem,
  we can create solutions which will work for other problems
  which share the same important details.

In his ACM Turing Lecture, “The Humble Programmer” in 1972, Dijkstra said
#+begin_quote
The purpose of abstraction is not to be vague, but to create
a new semantic level in which one can be absolutely precise.
#+end_quote

** Example: sorting

Consider a programer who is assigned the following tasks.
1. Design a program which sorts a list of
   dollar amounts in increasing order.
2. Design a program which sorts a list of
   bank accounts in increasing order of the amount in the account.
3. Design a program which sorts a list of
   bank customers in increasing order of the sum of the amounts
   across all of their accounts.

This programmer may write three programs which all look very similar,
except for
  - the type of the input and
  - the method of access the values compared during sorting.

Or the programmer may realise that if abstract away these details,
so the program is made
- to accept any type (is made polymorphic) and
- to take as an additional input the method of comparison,
the same code may be reused for all three tasks!

** “Leaky” abstractions


When we use an abstraction, we intend to hide unimportant details.
But in some cases, those details may still be exposed.
- We say they “leak through”, so we have a “leaky abstraction”.

A classic example is iterating over a two-dimensional array.
- Two-dimensional arrays allow us to reason about a square made of memory cells.
  - In a two-dimensional array ~A~, it would seem ~A[1][1]~ is adjacent
    to ~A[0][1]~, ~A[2][1]~, ~A[1][2]~, and ~A[1][0]~.
- But computer memory is one-dimensional.
  - A cell of memory cannot be adjacent to four others; only two.
- Iterating through two-dimensional arrays in the wrong direction
  can be very inefficient when the array is large.
  - If ~A[1][1]~ and ~A[2][1]~ are in fact not adjacent,
    and are in separate caches or on separate pages,
    we will trigger a cache miss or page fault
    by iterating through in the second dimension.

** A taxonomy of programming paradigms by abstraction support

From Peter Van Roy's 2012 paper,
“[[https://www.info.ucl.ac.be/~pvr/VanRoyChapter.pdf][Programming Paradigms for Dummies: What Every Programmer Should Know]]”.

#+attr_LaTeX: :width \textwidth
[[./media/vanroy-paradigm-chart.png]]

** Abstractions throughout this course

We will see numerous abstractions throughout this course.
- Functions, methods, procedures and subroutines abstract away from
  managing control flow.
- Variables abstract away from reasoning about the contents of
  registers and memory.
- Abstract data types abstract away from the form of data in memory.
- Reference types abstract away from reasoning about memory addresses.

We will also try to de-mystify some abstractions
which are often considered difficult to understand.
- Algebras abstract away from sets together with operations on those sets.
- Closures abstract away from the concept of a function
  existing alongside some state.
- Monads abstract away from choosing a particular computation strategy.

* Exercises
:PROPERTIES:
:CUSTOM_ID: Exercises
:END:

[[Exercise: a meaningless C or Java program][Exercise: a meaningless C or Java program]]
