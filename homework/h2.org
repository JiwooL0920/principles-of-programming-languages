#+Title: Computer Science 3MI3 ‚Äì 2020 homework 2
#+Subtitle: Solving problems in Prolog
#+Author: Mark Armstrong
#+Date: September 18th, 2020
#+Description: Introductory homework on Prolog and predicates
#+Options: num:nil
#+SETUPFILE: ../org-html-themes/setup/theme-readtheorg-local.setup

* Introduction
:PROPERTIES:
:CUSTOM_ID: Introduction
:END:

Prolog is a /logical programming/ language,
in which the task of the programmer
is to precisely describe the possible solution space,
rather than an algorithm to generate the solution.
The language runtime then performs a search
to find a solution fitting the description.

#+begin_center
Put simply, the programmer describes the problem, not the solution.
#+end_center

* Boilerplate
:PROPERTIES:
:CUSTOM_ID: Boilerplate
:END:

** Submission procedures
:PROPERTIES:
:CUSTOM_ID: Submission-procedures
:END:

#+INCLUDE: "./../boilerplate.org::*Homework submission" :only-contents t

** Proper conduct for coursework
:PROPERTIES:
:CUSTOM_ID: Proper-conduct-for-coursework
:END:

#+INCLUDE: "./../boilerplate.org::*Homework conduct" :only-contents t

* Part 0.1: Installing Prolog                            [0¬†points]
:PROPERTIES:
:CUSTOM_ID: Part-0.1:-Installing-Scala
:END:

In this course, we will be targetting
[[https://www.swi-prolog.org/][SWI Prolog]] version 8.2.0,
as used in the
[[https://hub.docker.com/_/swipl/][swipl]]
Docker image.

#+begin_center
*If there is any update to the Docker image,*
*or if for any other reason we change our targeted versions*,
*we will make an announcement on the homepage.*
#+end_center

That said, any recent version should suffice. 

** Installation guides
:PROPERTIES:
:CUSTOM_ID: Installation-guides
:END:

- Linux and MacOS users should be able to install SWI Prolog
  via their package manager.
- The [[https://www.swi-prolog.org/download/stable][SWI Prolog website]]
  provides downloads of prebuilt binaries for SWI Prolog 8.2.1.

* Part 0.2: Basic Prolog programming                     [0¬†points]
:PROPERTIES:
:CUSTOM_ID: Part-0.2:-Basic-Scala-programming
:END:

Some basic tutorial on Scala will be given
in an upcoming lecture, and also in the tutorials,
and should provide you with the knowledge you need
to complete this homework.

* Prolog specific instructions
:PROPERTIES:
:CUSTOM_ID: Prolog-specific-instructions
:END:

In your Prolog code in this course,
you are allowed to use all builtin predicates;
in particular, see the following entries of the
SWI Prolog documentation:
- [[https://www.swi-prolog.org/pldoc/man?section=arith][Arithmetic]] and
- [[https://www.swi-prolog.org/pldoc/man?section=builtinlist][Built-in list operations]]

[[https://github.com/alhassy/PrologCheatSheet][Musa AlHassy's Prolog cheat sheet]]
(developed in part for this course last year.)
is also a useful resource, and
includes links to several other resources.

* Part 1: Prime checker                                  [5¬†points]
:PROPERTIES:
:CUSTOM_ID: Part-1:-Prime-checker----------------------------------[5¬†points]
:END:

Here we define a predicate ‚Äúhas divisor less than or equal to‚Äù
which checks, for a given ~X~, if there exists a divisor
of ~X~ less than *or equal to* the given ~Y~ which is greater than 1.
(Edited September 20th: previously the preceding description
incorrectly said only ‚Äúless than‚Äù.)
#+begin_src prolog
hasDivisorLessThanOrEqualTo(_,1) :- !, false.
hasDivisorLessThanOrEqualTo(X,Y) :- 0 is X mod Y, !.
hasDivisorLessThanOrEqualTo(X,Y) :- Z is Y - 1, hasDivisorLessThanOrEqualTo(X,Z).
#+end_src
Roughly, this works as follows:
1. If ~Y~ is 1, end the search (don't backtrack to look for other proofs)
   and fail (search turns up ~false~).
2. Otherwise, if ~Y~ does divide ~X~, end the search immediately
   (don't backtrack looking for other proofs)
   (and the search will return ~true~).
3. Otherwise, check if there is a divisor of ~X~ which is less than ~Y - 1~.

Using this predicate, define a ~isPrime~ predicate
such that ~isPrime(X)~ returns true if ~X~ is a prime number.

* Part 2: From number to list of digits (and vice versa) [15¬†points]
:PROPERTIES:
:CUSTOM_ID: Part-2:-From-number-to-list-of-digits-(and-vice-versa)-[15¬†points]
:END:

Complete the following definition of predicate that checks
if a given list is a list of the digits in a given integer,
with the first element of the list being the ‚Äúones‚Äù digit,
the second element of the list being the ‚Äútens‚Äù digit, etc.

#+begin_center
*Updated September 23rd: the given code below has been changed,*
*and the description of the list has been ‚Äúreversed‚Äù.*
*Previously, the ones digits would have been the last element.*
*Now, it is the first element.*

One further edit was added later; remove the cut in the first case below.
#+end_center

We have filled in code to fetch the last element of the list
as a starting point.
#+begin_src prolog
isDigitList(_,[]) :- false.
isDigitList(X,[X]). % Your code here; change the . to :-
isDigitList(X,[H|T]). % Your code here; change the . to :-
#+end_src

(Note this predicate can be thought of as checking if the given list contains
the digits for the given integer, or as checking if the given integer
has the digits contained in a given list; hence, the ‚Äúvice versa‚Äù.)

You may use this code to ‚Äúdrop the last element‚Äù of the list
if you wish (in this part and the rest of the homework.)
Updated September 23rd: this predicate is unlikely to be necessary
for the updated version of this question.
#+begin_src prolog
% dropLast(L1,L2) if L2 is the list L1, leaving off the last item.
dropLast([_],[]). % The last element is dropped.
dropLast([H|T],[H|T2]) :-
  % Aside from the base case above, the lists must match.
  dropLast(T,T2).
#+end_src

* Part 3: Palindrome                                     [10¬†points]
:PROPERTIES:
:CUSTOM_ID: Part-3:-Palindrome-------------------------------------[10¬†points]
:END:

Define a predicate ~isPalindrome~ which checks that a given
list is a palindrome.

Note you can use pattern matching with the list ‚Äúcons‚Äù operator, ~|~,
to refer to the head and tail of a list, as in
#+begin_example prolog
palindrome([H|T]) :- ??? % H is the first element, T is the rest
#+end_example

* Part 4: Prime palindromes                              [15¬†points]
:PROPERTIES:
:CUSTOM_ID: Part-4:-Prime-palindromes------------------------------[15¬†points]
:END:

Define a predicate ~primePalindrome~ which checks
if a given integer is both
1. prime, and
2. a palindrome (in terms of the list of its digits).

* Part 5: Efficiency                                     [10¬†bonus¬†points]
:PROPERTIES:
:CUSTOM_ID: Part-5:-Efficiency-------------------------------------[10¬†bonus_points]
:END:

For extra marks, research how to make your above definitions more efficient.

In particular, look into the use of the ‚Äúcut‚Äù operator, ~!~,
to prevent backtracking.

Updated September 25th: these test scripts,
separate from the provided unit testing, can be used
to evaluate the efficiency of your solution.
The ~time~ predicate used will report the number
of inferences used and how long the test takes.

(Updated September 26th: I've run the tests again
and provided here the number of inferences
my sample solution takes. as a better metric.)

On my naive, unoptimised sample solution,
the [[./testing/h2/h2-timing.pl][first test]] makes 222,020,399 inferences (and takes 45 seconds on my machine).
The [[./testing/h2/h2-beastly-timing.pl][second test]] makes 1,401,332,191 inferences (and takes 5 minutes on my machine).
The [[./testing/h2/h2-belphegor-timing.pl][last one]] did not halt before I gave up on it üòÄ.
#+begin_src prolog :tangle testing/h2/h2-timing.pl
:- consult(h2).

:- initialization(writeln('Timing prime palindrome')).
:- initialization(time(primePalindrome(111010111))).
#+end_src
#+begin_src prolog :tangle testing/h2/h2-beastly-timing.pl
:- consult(h2).

:- initialization(writeln('Timing prime palindrome with a beastly prime palindrome')).
:- initialization(time(primePalindrome(700666007))).
#+end_src
#+begin_src prolog :tangle testing/h2/h2-belphegor-timing.pl
:- consult(h2).

:- initialization(writeln('Timing prime palindrome with Belphegor\'s prime palindrome')).
:- initialization(time(primePalindrome(1000000000000066600000000000001))).
#+end_src

* Testing
:PROPERTIES:
:CUSTOM_ID: Testing
:END:

As of September 23rd, unit tests for the requested predicates
can be found [[./testing/h2/h2.plt][here]]. The contents of the unit test file are also repeated below.

Important notes regarding this testing:
1. Unlike homework 1, for homework 2 it is /mandatory/
   that your code pass these tests.
2. There is no interface file that you need to complete.
   You still only need submit your ~h2.pl~ file.
3. Passing these tests does not guarantee a particular grade.
   What has been provided is intended to act as a /sanity check/,
   and more thorough tests may be used in the grading process.

The tests can be run by placing the ~h2.plt~ unit test file
in the same directory as your ~h2.pl~, and running the command
#+begin_src shell
swipl -t "load_test_files([]), run_tests." -s h2.pl
#+end_src
in your shell in that directory.

** Automated testing via Docker
:PROPERTIES:
:CUSTOM_ID: Automated-testing-via-Docker
:END:

Once you have [[https://docs.docker.com/get-docker/][Docker]]
and [[https://docs.docker.com/compose/install/][Docker Compose]]
(installation guides linked here)
installed, you can easily run the unit tests
by copying the files
- ~Dockerfile~,
- ~docker-compose.yml~,
- ~setup.sh~ and
- ~run.sh~
into your ~h2~ directory where your ~h2.pl~ file exists,
and running ~setup.sh~ and ~run.sh~.

See the README for this testing setup and those files
[[https://github.com/armkeh/principles-of-programming-languages/tree/master/homework/testing/h2][on the course GitHub repo]].

Note that the use of the ~setup.sh~ and ~run.sh~ scripts assumes
that you are in a ~bash~ like shell; if you are on Windows,
and not using WSL or WSL2, you may have
to run the commands contained in those scripts manually.

** The tests
:PROPERTIES:
:CUSTOM_ID: The-tests
:END:

The contents of
[[./testing/h2/h2.plt][the testing script]]
are repeated here.
#+begin_src prolog :tangle testing/h2/h2.plt
:- begin_tests(h2).
:- include(h2).


% isPrime tests

test(five_is_prime, nondet) :- isPrime(5).
test(sixty_seven_is_prime, nondet) :- isPrime(67).
% The \+ means ‚Äúit is not provable that.‚Äù
test(four_is_not_prime, nondet) :- \+ isPrime(4).
test(one_hundred_is_not_prime, nondet) :- \+ isPrime(100).
% Also test there are no ‚Äúbad‚Äù proofs that primes are not prime.
test(not_five_is_not_prime, nondet) :- \+ not(isPrime(5)).



% isDigitList tests

test(digit_list_12345, nondet) :- isDigitList(12345,[5,4,3,2,1]).
test(not_digit_list_12345_grouped, nondet) :- \+ isDigitList(12345,[5,43,2,1]).



% isPalindrome tests

test(empty_palindrome, nondet) :- isPalindrome([]).
test(pair_palindrome, nondet) :- isPalindrome([1,1]).
test(steponnopets_palindrome, nondet) :- isPalindrome([s,t,e,p,o,n,n,o,p,e,t,s]).
test(palindrome_elements_atomic, nondet) :- \+ isPalindrome([12, 21]).



% primePalindrome tests

test(eleven_prime_palindrome, nondet) :- primePalindrome(11).
test(nine_twenty_nine_prime_palindrome, nondet) :- primePalindrome(929).
test(not_thirteen_prime_palindrome, nondet) :- \+ primePalindrome(13).
test(not_twenty_two_prime_palindrome, nondet) :- \+ primePalindrome(22).
#+end_src
