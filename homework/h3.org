#+Title: Computer Science 3MI3 – 2020 homework 3
#+Subtitle: Revisiting homework 1 in Prolog and homework 2 in Scala
#+Author: Mark Armstrong
#+Date: September 25th, 2020
#+Description: Reversing our introductions to Scala and Prolog.
#+Options: num:nil
#+SETUPFILE: ../org-html-themes/setup/theme-readtheorg-local.setup

* Introduction
:PROPERTIES:
:CUSTOM_ID: Introduction
:END:

We have now worked in Scala for one homework,
representing different kinds of trees
and defining operations on them.

We have also worked in Prolog solving problems
about palindromes and prime numbers.

For our third homework, we gain further experience
in both languages by tackling our previous problems
in the other language.
Since they are from different paradigms,
although the problems are the same,
your solutions will out of necessity be quite different.

* Boilerplate
:PROPERTIES:
:CUSTOM_ID: Boilerplate
:END:

** Submission procedures
:PROPERTIES:
:CUSTOM_ID: Submission-procedures
:END:

#+INCLUDE: "./../boilerplate.org::*Homework submission" :only-contents t

** Proper conduct for coursework
:PROPERTIES:
:CUSTOM_ID: Proper-conduct-for-coursework
:END:

#+INCLUDE: "./../boilerplate.org::*Homework conduct" :only-contents t

* Part 1: Flattening and ordering trees in Prolog [20 points]
:PROPERTIES:
:CUSTOM_ID: Part-1:-Flattening-and-ordering-trees-in-Prolog-[20 points]
:END:

Using the representations (not technically types)
of ~BinTree~ and ~LeafTree~ trees discussed in the
“Trees in Prolog” lecture (links below),
write predicates ~flatten~ and ~elemsOrdered~ in Prolog.
- (Each predicate is assigned 7.5 points.)

Each should be a binary predicate,
taking a tree and a list as parameters.
So ~flatten(T,L)~ means that ~L~ is the result of flattening ~T~,
and similarly ~elemsOrdered(T,L)~ means that ~L~ is a
list of elements of ~T~ in order.

Implement your own sorting predicate to use in ~elemsOrdered~;
do not use a predefined one.
- (The sorting predicate is assigned 5 points.)

Refer to the “Trees in Prolog” lecture notes, available as
- [[./../notes/live-coding/09-25-Trees-in-Prolog.html][HTML]],
- [[./../notes/live-coding/09-25-Trees-in-Prolog.pdf][PDF]], or
- [[./../notes/live-coding/09-25-Trees-in-Prolog.org][plaintext Org source]],
  
* Part 2: Predicates in Scala                     [20 points]
:PROPERTIES:
:CUSTOM_ID: Part-2:-Predicates-in-Scala---------------------[20 points]
:END:

In Scala and other non-logical languages,
we can represent predicates as boolean-valued functions/methods
(functions/methods which return booleans).
Note that in Scala the type of booleans is ~Boolean~
(not ~Bool~, as it is in some languages.)

In Scala, implement the predicates from homework 2:
1. ~isPrime~ on the ~Int~ type.
   - (assigned 5 points.)
2. ~isPalindrome~ on the type ~List[A]~ for any ~A~.
   - (assigned 5 points.)
3. ~primePalindrome~ on the type ~Int~.
   - (assigned 5 points.)

In the process, also define a method ~digitList~ (not ~isDigitList~)
which converts an ~Int~ into a ~List[Int]~ consisting
of its digits, with the first element of the list being
the “ones” digits, the second element being the “tens” digit, etc.
- (this method is assigned 5 points.)

* Part 3: ??? [?? bonus points]
:PROPERTIES:
:CUSTOM_ID: Part-3:-???-[?? bonus points]
:END:

:TODO:

* Testing
:PROPERTIES:
:CUSTOM_ID: Testing
:END:

As of September 28th, unit tests for the requested predicates
are available through the following links.
- Scala unit tests: [[./testing/h3/h3.plt][h3t.sc]].
- Prolog unit tests: [[./testing/h3/h3.plt][h3.plt]].
The contents of the unit test file are also repeated below.

The tests can be run by placing the ~h3t.sc~ and ~h3.plt~ files
in the same directory as your ~h3.sc~ and ~h3.pl~ files, and
running the following commands.
#+begin_src shell
amm h3t.sc
#+end_src
and
#+begin_src shell
swipl -t "load_test_files([]), run_tests." -s h3.pl
#+end_src
to test your Prolog code.

If you use implementations other than Ammonite and SWI Prolog,
you may need to adjust the tests to be able to run them
on your system.

In particular, those using IntelliJ for writing Scala
may need to remove the import statement at the top of that file,
or move the tests to their source file
(if so, be sure to remove them before submission!)

** Automated testing via Docker
:PROPERTIES:
:CUSTOM_ID: Automated-testing-via-Docker
:END:

:TODO:

** The tests
:PROPERTIES:
:CUSTOM_ID: The-tests
:END:

The contents of the testing scripts are repeated here.

*** The Scala tests
:PROPERTIES:
:CUSTOM_ID: The-Scala-tests
:END:

#+begin_src amm :results none :tangle testing/h3/h3t.sc
import $file.h1, h1._

/* Given an expected result and a computed result,
   check if they are equal in value.
   If so, return 0. Otherwise, inform the user, and return 1,
   so the number of failures can be counted. */
def test[A](given: A, expected: A, the_test: String) =
  if (!(given equals expected)) {
    println("+---------------------------------------------------")
    println("| " + the_test + " failed.")
    println("| Expected " + expected + ", got " + given + ".")
    println("+---------------------------------------------------")
    1
  } else {
    0
  }

// The tests are saved as tuples, the pieces of which will be passed
// to test.
val tests = List(
  (isPrime(2), true, "Two is prime"),
  (isPrime(53), true, "Fifty three is prime"),
  (isPrime(8), false, "Eight is not prime"),
  (isPrime(63), false, "Sixty-three is not prime"),
  (isPalindrome(List()), true, "Empty palindrome"),
  (isPalindrome(List(1,1)), true, "Pair palindrome"),
  (isPalindrome(List('s','t','e','p','o','n','n','o','p','e','t','s')), true, "step on no pets palindrome"),
  (isPalindrome(List(12,21)), false, "Palindrome elements are atomic"),
  (isPrimePalindrome(11), true, "Eleven is prime palindrome"),
  (isPrimePalindrome(929), true, "Nine twenty nine is prime palindrome"),
  (isPrimePalindrome(13), false, "Thirteen is not prime palindrome"),
  (isPrimePalindrome(22), false, "Twenty two is not prime palindrome"),
  )

// Apply test to each element of tests, and sum the return values.
// This is essentially a for loop.
val failed = tests.foldLeft(0) {
  (failures, next) => next match {
    // Deconstruct the tuple to get its parts
    case (given, expected, the_test) => failures + test(given, expected, the_test)
  }
}

println("+---------------------------------------------------")
println("| " + failed + " tests failed")
println("+---------------------------------------------------")
#+end_src

*** The Prolog tests
:PROPERTIES:
:CUSTOM_ID: The-Prolog-tests
:END:

#+begin_src prolog :tangle testing/h3/h3.plt
:- begin_tests(h3).
:- include(h3).

% One way to "name" values is to use predictes such as these.
% Then a variable can be bound to the values here using the predicate.
largeLeafTree(T) :-
    T = branch(
         branch(
          branch(leaf(10),leaf(-2)),
          branch(leaf(3),leaf(400))),
         branch(
          branch(leaf(55),leaf(6)),
          branch(leaf(777),leaf(88888888)))).
largeLeafTreeFlat(L) :-    L = [10,-2,3,400,55,6,777,88888888].
largeLeafTreeOrdered(L) :- L = [-2,3,6,10,55,400,777,88888888].

largeBinTree(T) :-
    T = node(
         node(
          node(empty,1,empty),
          22,
          node(empty,-3,empty)),
         404,     
         node(
          node(empty,50,node(empty,6,empty)),
          7777777,
          node(node(empty,-88,empty),9001,empty))).
largeBinTreeFlat(L) :-    L = [1,22,-3,404,50,6,7777777,-88,9001].
largeBinTreeOrdered(L) :- L = [-88,-3,1,6,22,50,404,9001,7777777].


% The tests

test(flatten_leaf, nondet) :- flatten(leaf(5),[5]).
test(flatten_branch, nondet) :- flatten(branch(leaf(1),leaf(2)),[1,2]).
test(flatten_large_leaftree, nondet) :- largeLeafTree(X), largeLeafTreeFlat(L), flatten(X,L).

test(order_leaf, nondet) :- orderedElems(leaf(5),[5]).
test(order_branch, nondet) :- orderedElems(branch(leaf(1),leaf(2)),[1,2]).
test(order_large_leaftree, nondet) :- largeLeafTree(X), largeLeafTreeOrdered(L), orderedElems(X,L).

test(flatten_empty, nondet) :- flatten(empty,[]).
test(flatten_node, nondet) :- flatten(node(empty,5,empty),[5]).
test(flatten_large_bintree, nondet) :- largeBinTree(X), largeBinTreeFlat(L), flatten(X,L).

test(order_empty, nondet) :- orderedElems(empty,[]).
test(order_node, nondet) :- orderedElems(node(empty,5,empty),[5]).
test(order_large_bintree, nondet) :- largeBinTree(X), largeBinTreeOrdered(L), orderedElems(X,L).
#+end_src
